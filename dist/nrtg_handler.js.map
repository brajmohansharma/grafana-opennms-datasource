{"version":3,"sources":["../src/nrtg_handler.js"],"names":[],"mappings":"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","file":"nrtg_handler.js","sourcesContent":["import moment from 'moment';\n\n/*\nPrototype code used to stream metrics from NRTG to the Grafana's streaming APIs.\n\nYou can use the following to invoke this from a datasource:\n  query(options) {\n    // NRTG Streaming\n    var handler = new NRTGHandler(options, this);\n    handler.start();\n    return Promise.resolve(handler);\n  }\n*/\nexport class NRTGHandler {\n\n  constructor(options, datasource) {\n    this.options = options;\n    this.datasource = datasource;\n    this.pollingInterval = 1000;\n    this.subscribers = [];\n\n    this.startTime = null;\n    this.endTime = null;\n    this.datapoints = [];\n  }\n\n  start() {\n    var _this = this;\n    this.datasource.backendSrv.datasourceRequest({\n      url: this.datasource.url + '/nrt/starter',\n      method: 'GET',\n      params: {\n        resourceId: \"node[10].nodeSnmp[]\",\n        report: \"mib2.tcpopen\"\n      }\n    }).then(response => {\n      _this.handleCollectionDetails(response.data);\n    });\n  }\n\n  handleCollectionDetails(nrtgCollectionDetails) {\n    var _this = this;\n\n    // Start polling\n    this.collectionTaskId = nrtgCollectionDetails.collectionTaskId;\n    var poll = function () {_this.poll();}.bind(_this);\n    poll();\n    setInterval(poll, _this.pollingInterval);\n  }\n\n  poll() {\n    var self = this;\n    if (self.pollInProgress === true) {\n      // If another poll is already in progress, then skip this one\n      return;\n    }\n\n    self.pollInProgress = true;\n    this.datasource.backendSrv.datasourceRequest({\n      url: this.datasource.url + '/nrt/starter',\n      method: 'GET',\n      params: {\n        poll: \"true\",\n        nrtCollectionTaskId: self.collectionTaskId\n      }\n    }).then(response => {\n      self.pollInProgress = false;\n      self.handleMeasurementSets(response.data.measurement_sets);\n    });\n  }\n\n  handleMeasurementSets(measurementSets) {\n    var i, nsets, nsubscribers;\n    for (i = 0, nsets = measurementSets.length; i < nsets; i++) {\n      var measurements = measurementSets[i];\n      for (var k = 0, nmeasurements = measurements.length; k < nmeasurements; k++) {\n        if (!this.startTime) {\n          this.startTime = measurements[k].timeStamp;\n        }\n        this.endTime = measurements[k].timeStamp;\n        this.datapoints.push([measurements[k].value, measurements[k].timeStamp]);\n      }\n    }\n\n    if (!this.startTime) {\n      return;\n    }\n\n    var seriesList = [{\n      target: \"x\",\n      datapoints: this.datapoints\n    }];\n\n    for (i = 0, nsubscribers = this.subscribers.length; i < nsubscribers; i++) {\n      this.subscribers[i].next({data: seriesList, range: {from: moment(this.startTime), to: moment(this.endTime)}});\n    }\n  }\n\n  subscribe(options) {\n    this.subscribers.push(options);\n  }\n}\n"]}